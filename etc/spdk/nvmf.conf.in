# NVMf Target Configuration File
#
# Please write all parameters using ASCII.
# The parameter must be quoted if it includes whitespace.
#
# Configuration syntax:
# Leading whitespace is ignored.
# Lines starting with '#' are comments.
# Lines ending with '\' are concatenated with the next line.
# Bracketed ([]) names define sections

[Global]
  # Users can restrict work items to only run on certain cores by
  #  specifying a ReactorMask.  Default ReactorMask mask is defined as
  #  -c option in the 'ealargs' setting at beginning of file nvmf_tgt.c.
  #ReactorMask 0x00FF

  # Tracepoint group mask for spdk trace buffers
  # Default: 0x0 (all tracepoint groups disabled)
  # Set to 0xFFFFFFFFFFFFFFFF to enable all tracepoint groups.
  #TpointGroupMask 0x0

  # syslog facility
  LogFacility "local7"

[Rpc]
  # Defines whether to enable configuration via RPC.
  # Default is disabled.  Note that the RPC interface is not
  # authenticated, so users should be careful about enabling
  # RPC in non-trusted environments.
  Enable No
  # Listen address for the RPC service.
  # May be an IP address or an absolute path to a Unix socket.
  Listen 127.0.0.1

# Users may change this section to create a different number or size of
#  malloc LUNs.
# This will generate 8 LUNs with a malloc-allocated backend.
# Each LUN will be size 64MB and these will be named
# Malloc0 through Malloc7.  Not all LUNs defined here are necessarily
#  used below.
[Malloc]
  NumberOfLuns 8
  LunSizeInMB 64

# Users must change this section to match the /dev/sdX devices to be
# exported as iSCSI LUNs. The devices are accessed using Linux AIO.
# The format is:
# AIO <file name> <bdev name>
# The file name is the backing device
# The bdev name can be referenced from elsewhere in the configuration file.
[AIO]
  AIO /dev/sdb AIO0
  AIO /dev/sdc AIO1

# Define NVMf protocol global options
[Nvmf]
  # NVME spec version. For example NVMe 1.2.1 its 0x010201
  NVMeVersion 0x010201

  # Maximum admin queue depth
  MaxAqDepth 32

  # Set the maximum number of submission and completion queues per session.
  # Setting this to '8', for example, allows for 8 submission and 8 completion queues
  # per session.
  MaxQueuesPerSession 4

  # Set the maximum number of outstanding I/O per queue.
  #MaxQueueDepth 128

  # Set the maximum in-capsule data size. Must be a multiple of 16.
  #InCapsuleDataSize 4096

  # Set the maximum I/O size. Must be a multiple of 4096.
  #MaxIOSize 131072

  # Set the global acceptor lcore ID, lcores are numbered starting at 0.
  #AcceptorCore 0

  # Set how often the acceptor polls for incoming connections. The acceptor is also
  # responsible for polling existing connections that have gone idle. 0 means continuously
  # poll. Units in microseconds.
  AcceptorPollRate 10000

  # Set the arbitration burst: maximum number of commands, indicated as a power of 2, picked
  # up from a submission queue at one time.
  # Ex: Specifying 6 would result in arbitration burst being 64.
#ArbitrationBurst 6

  # Organizations IEEE OUI identifier. This is a 3 byte value.
  # Each ID indicates value for 1 byte.
#IEEEOUI0 0
#IEEEOUI1 0
#IEEEOUI2 0

  # Controller Multi-Path IO and Namespace Sharing capabilites
  # Refer Identify Controller Data Structure in NVM Express base spec
#CMIC 0

  # Namespace Multi-Path IO and Namespace Sharing capabilites
  # Refer Identify Namespace Data Structure in NVM Express base spec
#NMIC 0

  # Optional AER Support: Indicates Optional Asynchronous events supported
  # by a controller
#OptAerSupport 0

  # Abort Limit: Indicates the maximum number of concurrent Abort commands
  # supported by the controller
#AbortLimit 0

  # AER Limit: Indicates the maximum number of concurrently outstanding AER commands
  # supported by the controller
#AerLimit 0

  # Error Log Page Entries: Indicates the maximum number of Error Log Page entries
  # stored by the controller
#ErrLogEntries 127

  # Number of Power States: Indicates the number of NVM Express power states supported
  # by the controller
#NumPowerStates 1

  # Keep Alive Interval: Indicates the granularity of Keep Alive timer in 100ms units.
  # 0 indicates keep alive is not supported
#KeepAliveInt 10

  # Volatile Write Cache: Volatile Write Cache attributes.
  # Refer to Identify Controller Datastructure in NVM Express base spec.
#VolatileWriteCache 1

  # Atomic Write Unit Normal: Refer to Identify Controller Datastructure in NVM Express
  # base spec
#AtomicWriteNormal 1

  # Atomic Write Unit Power Fail: Refer to Identify Controller Datastructure in NVM Express
  # base spec
#AtomicWritePowerFail 1

  # SGL Support: Refer to Identify Controller Datastructure in NVM Express
  # base spec
#SGLSupport 5

  # Optional NVM Command Support: Indicates Optional NVM Commands and features
  # supported by a controller. We enable DSM by default
  OptNVMCommandSupport 4

  # Model Number: Indicates the model number of the controller
  ModelNumber "SPDK Virtual Controller"
  # Global setting allows all hosts to connect to all subsystems
  # Per-Subsystem setting can be used to override global
  AllowAnyHost No

[Nvme]
  # NVMe Device Whitelist
  # Users may specify which NVMe devices to claim by their transport id.
  # See spdk_nvme_transport_id_parse() in spdk/nvme.h for the correct format.
  # The second argument is the assigned name, which can be referenced from
  # other sections in the configuration file. For NVMe devices, a namespace
  # is automatically appended to each name in the format <YourName>nY, where
  # Y is the NSID (starts at 1).
  TransportId "trtype:PCIe traddr:0000:00:00.0" Nvme0
  TransportId "trtype:PCIe traddr:0000:01:00.0" Nvme1

  # The number of attempts per I/O when an I/O fails. Do not include
  # this key to get the default behavior.
  RetryCount 4
  # Timeout for each command, in seconds. If 0, don't track timeouts.
  Timeout 0
  # Action to take on command time out. Only valid when Timeout is greater
  # than 0. This may be 'Reset' to reset the controller, 'Abort' to abort
  # the command, or 'None' to just print a message but do nothing.
  # Admin command timeouts will always result in a reset.
  ActionOnTimeout None
  # Set how often the admin queue is polled for asynchronous events.
  # Units in microseconds.
  AdminPollRate 100000

  # Enable handling of hotplug (runtime insert and remove) events
  HotplugEnable Yes

# The Split virtual block device slices block devices into multiple smaller bdevs.
[Split]
  # Syntax:
  #   Split <bdev> <count> [<size_in_megabytes>]

  # Split Malloc2 into two equally-sized portions, Malloc2p0 and Malloc2p1
  Split Malloc2 2

  # Split Malloc3 into eight 1-megabyte portions, Malloc3p0 ... Malloc3p7,
  # leaving the rest of the device inaccessible
  Split Malloc3 8 1

# Define an NVMf Subsystem.
# - NQN is required and must be unique.
# - Core may be set or not. If set, the specified subsystem will run on
#   it, otherwise each subsystem will use a round-robin method to allocate
#   core from available cores,  lcores are numbered starting at 0.
# - Mode may be either "Direct" or "Virtual". Direct means that physical
#   devices attached to the target will be presented to hosts as if they
#   were directly attached to the host. No software emulation or command
#   validation is performed. Virtual means that an NVMe controller is
#   emulated in software and the namespaces it contains map to block devices
#   on the target system. These block devices do not need to be NVMe devices.
#   Only Direct mode is currently supported.
# - Between 1 and 255 Listen directives are allowed. This defines
#   the addresses on which new connections may be accepted. The format
#   is Listen <type> <address> where type currently can only be RDMA.
# - Between 0 and 255 Host directives are allowed. This defines the
#   NQNs of allowed hosts. If no Host directive is specified, all hosts
#   are allowed to connect.
# - Exactly 1 NVMe directive specifying an NVMe device by PCI BDF. The
#   PCI domain:bus:device.function can be replaced by "*" to indicate
#   any PCI device.
# - AllowAnyHost may be either true or false. If it is set, any host can
#   access the subsytem even thougth it is not added to it.
#   . AllowAnyHost does not affect the Discovery Controller
#   . When AllowAnyHost is missing, the global AllowAnyHost setting
#     is used for the Subsytem.
#   . When AllowAnyHost is false a valid Host NQN must be added to
#     the Subsystem. Valid NQNs must contain no upper case letters.
#
# Note: Valid host NQNs can be generated with the Linux 'nvme get-hostnqn' utility.
#      To make the The Linux host NQN persistent, add to the /etc/nvme/hostnqn file.
#
#  E.g.:
#
#  $ sudo nvme gen-hostnqn | tr A-Z a-z > /etc/nvme/hostnqn
#  $ cat /etc/nvme/hostnqn
#  nqn.2014-08.org.nvmexpress:nvmf:uuid:6a007efc-2f43-4123-9c41-9c48896855e1
#
# Direct controller
[Subsystem1]
  NQN nqn.2016-06.io.spdk:cnode1
  Core 0
  Mode Direct
  Listen RDMA 15.15.15.2:4420
  Host nqn.2016-06.io.spdk:init
  AllowAnyHost Yes
  NVMe 0000:00:00.0

# Multiple subsystems are allowed.
# Virtual controller
[Subsystem2]
  NQN nqn.2016-06.io.spdk:cnode2
  Core 0
  Mode Virtual
  Listen RDMA 192.168.2.21:4420
  Host nqn.2014-08.org.nvmexpress:nvmf:uuid:6a007efc-2f43-4123-9c41-9c48896855e1
  Hoat nqn.2014-08.org.nvmexpress:nvmf:uuid:3aebfc32-7e08-4fa2-9c98-43dd8f7d3841
  SN SPDK00000000000001
  Namespace Nvme0n1
#Namespace Nvme0n2 NGUID cfb11df2e43a49779293f41319de4fbb
  Namespace Nvme1n1
  Namespace Malloc0
  Namespace Malloc1
#Namespace Malloc2 UUID cfb11df2e43a49779293f41319de4fbb
  Namespace AIO0
  Namespace AIO1
